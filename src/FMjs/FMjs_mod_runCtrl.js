/*

// Model configurations
        ==> see mod_config.js
        - Since loading a json on start up can be tricky the json-data is directly to the mod_config variable in this file
        - 
*/
// console.log('Model configuration with interaction overlay');
// console.log(mod_config);

/*

// For all variables with the variability: 'output' the calculated values made accessible by a autogenerated object
// The Object has a similar structure as the modconfig ()

      const mod_autoOutput = {
        SimTime:{
          current: c_val1,
          allPrev: a_val1,
        },
        SineOutput: {
          current: c_val1,
          allPrev: a_val1,
        },
        outputVar2: {
          current: c_val2,
          allPrev: a_val2,
        },
      }; 

*/
const mod_autoOutput = {};

/*

// model runtime control object

*/

var mod_runCtrl = {
  runCtrlAvailable: mod_config.numbOfRequiredCombiTimeTables == 0, // if combiTimeTable is not required the run Controls need to be available
  runOnPageLoad: true,
  wasmReady: false,
  fmu2Ready: false,
  defaultFilesReady: false,
  softRealTime: {
    playButton: false,
    pauseButton: false,
    resetButton: false,

    runAnimation: true,

    isOnStartOrReset: true,
    dispResults: false,
  },
  oneShot: {
    simulateButton: false,
    updateProgressBar: false,
    progress: 0,
    setInt_id: null,
    dispResults: false,
    hasLoadingScreen: false, // Implies that the runtime while loop of the DoStep is segmentet/ async to avoid browser errors
  },

  // combiTimeTables: {
  //   // Meteo Data, Location
  //   table1: {
  //     numb_required: mod_config.numbOfRequiredCombiTimeTables,
  //     isLoadedFS: false,
  //     warningTxt: "Keine Meteodaten fÃ¼r den eigenen Standort vorhanden",
  //     tableName: "tab1",
  //     path2File: "AutoGeneratedPath",
  //     memoryPath2File: "",
  //     fileDispName: "",
  //     sources: {
  //       def1: {
  //         // path in webassemlby filesystem
  //         path: "/defaultUpload/Luzern_2019.txt",
  //         // data as uint8arry
  //         data: luzern_txt_asUint8Array,
  //         // if true sets this data in the fmu and gui
  //         isSelected: true,
  //         // value of the coresponding drop down tap in the gui
  //         dropDownValue: "loc1",
  //       },
  //       def2: {
  //         path: "/defaultUpload/Luzern2_2019.txt",
  //         data: luzern_txt_asUint8Array,
  //         isSelected: false,
  //         dropDownValue: "loc2",
  //       },
  //       user: {
  //         path: "AutoGeneratedPath",
  //         data: 1,
  //         isSelected: false,
  //         dropDownValue: "usrProfile",
  //       },
  //     },
  //   },
  //   // Load 1
  //   table2: {
  //     numb_required: mod_config.numbOfRequiredCombiTimeTables,
  //     isLoadedFS: false,
  //     warningTxt: "Kein eigenes Verbraucherprofil 1 vorhanden",
  //     tableName: "tab1",
  //     path2File: "AutoGeneratedPath",
  //     memoryPath2File: "",
  //     fileDispName: "",
  //     sources: {
  //       def1: {
  //         path: "/defaultUpload/loads1_def1.txt",
  //         data: washingMachine_profile_Day,
  //         isSelected: false,
  //         dropDownValue: "loads1_day",
  //       },
  //       def2: {
  //         path: "/defaultUpload/loads1_def2.txt",
  //         data: washingMachine_profile_Night,
  //         isSelected: false,
  //         dropDownValue: "loads1_night",
  //       },
  //       def3: {
  //         path: "/defaultUpload/loads1_def3.txt",
  //         data: washingMachine_profile_Model,
  //         isSelected: true,
  //         dropDownValue: "loads1_Model",
  //       },
  //       user: {
  //         path: "AutoGeneratedPath",
  //         data: 1,
  //         isSelected: false,
  //         dropDownValue: "usrProfile",
  //       },
  //     },
  //   },

  //   // Load 2
  //   table3: {
  //     numb_required: mod_config.numbOfRequiredCombiTimeTables,
  //     isLoadedFS: false,
  //     warningTxt: "Kein eigenes Verbraucherprofil 2 vorhanden",
  //     tableName: "tab1",
  //     path2File: "AutoGeneratedPath",
  //     memoryPath2File: "",
  //     fileDispName: "",
  //     sources: {
  //       def1: {
  //         path: "/defaultUpload/loads2_def1.txt",
  //         data: dishWasher_profile_Day,
  //         isSelected: false,
  //         dropDownValue: "loads1_day",
  //       },
  //       def2: {
  //         path: "/defaultUpload/loads2_def2.txt",
  //         data: dishWasher_profile_Night,
  //         isSelected: false,
  //         dropDownValue: "loads1_night",
  //       },
  //       def3: {
  //         path: "/defaultUpload/loads2_def3.txt",
  //         data: dishWasher_profile_Model,
  //         isSelected: true,
  //         dropDownValue: "loads1_Model",
  //       },
  //       user: {
  //         path: "AutoGeneratedPath",
  //         data: 1,
  //         isSelected: false,
  //         dropDownValue: "usrProfile",
  //       },
  //     },
  //   },

  //   // End combiTimeTables
  // },

  // Start userData Export
  userDataExport: {
    userDataExportEnabled: true,
    isInExportState: true,
    expFilDef: {
      file1: {
        fName: "LevitatorData",
        expCompressionFactor: 1, // Nur Integer! pseudoStepSize = stepSize * expReductionFactor
        expParamReq: [
          "SimTime",
          // Res
          "res_height",
          'res_setUFanEff',

          // Inputs
          'par_isCLC',
          'res_setHeightCLC',
          'res_setUFanOLC',
          'par_opFan',


          'par_PID_P', 
          'par_PID_I',
          'par_PID_D',

          'par_stepOrDirValvePos',


        ],
        useCustomParameterNames: true,
        customParameterNames: [
          "Time [s]",
          // Res
          "y [m]",
          "u [rpm]",

          // Inputs
          "closed loop",
          "r selected [m]",
          "s selected [rpm]",
          "Ar [rpm]",

          "P part", 
          "I part", 
          "D part",

          "Step or Dirac throttle pos. []",

        ],
      },
    },
  },

  // End userData Export
};

/*







/////////////////////////////////////     START WebAssembly Handling includes FMU      //////////////////////////////////////////






*/

// Supress alerts == > avoid "page not responding" alert which stalls the code
// alert('First alert');
window.alert = function () {};
// alert('Sencond alert');

// Set up Module object (Interface to the wasm)
var Module = {
  print: function (text) {
    console.log("Webassembly stdout: " + text);
  },
  printErr: function (text) {
    console.log("Webassembly stderr: " + text);
  },
};

Module.preRun = (_) => {
  // Not used currently
  // Stuff can be done here before the WASM runs
  // console.log("Module preRun");
};

// once the Module is loaded the "onRuntimeInitialized" is called by the WASM therefore this structure
Module.onRuntimeInitialized = (_) => {
  mod_runCtrl.wasmReady = true; // wasm is no ready for manipulation
  setup_js_wasm_fmu_IO(); // enable input and ouput js <==> wasm <==> fmi (fmu)
  defaultInputFilesLoader();

  setup_fmuOnStart();

  getRunTimeMethod();

  if (mod_runCtrl.runOnPageLoad) {
    mod_runCtrl.oneShot.simulateButton = true;
    mod_runCtrl.softRealTime.playButton = true;
  }
}; // End onRuntimeInitialized
